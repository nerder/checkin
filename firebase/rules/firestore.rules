function requestData() {
  return request.resource.data;
}

// todo refactor this, atm makes no sense - check usage
function isLoggedUser(email) {
  return request.auth.token.email == email;
}

function loggedUserIsGuildMaster(database) {
  return get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.isOwner
}

function loggedUserIsDev(database) {
  return get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.isDev
}


service cloud.firestore {
  match /databases/{database}/documents {

    // Start here. Keep your database locked down by default, then add rules to grant access to certain read or writes.
    // If you flip that value to true and your entire database will be open to the public.
    match /{document=**} {
      allow read, write: if false;
    }
    
    match /{document=**} {
      allow read, write: if loggedUserIsGuildMaster(database) || loggedUserIsDev(database)
    }

    match /users/{email} {
      allow read: if isLoggedUser(email);
      allow create: if isLoggedUser(email) && ! requestData().keys().hasAny(['isOwner', 'isDev']);
      allow update: if isLoggedUser(email) && ! requestData().keys().hasAny(['isOwner', 'isDev']);
    }

    match /lessons/{document=**} {
      allow read: if isLoggedUser(request.auth.token.email);
    }

    match /class/{document=**} {
      allow read: if isLoggedUser(request.auth.token.email);
    }

    match /class/{id} {
      // https://stackoverflow.com/a/41922261/4349619
      // To allow adding new nodes, but prevent deleting or overwriting any node
      // todo if we allow users to change their names this wont work anymore
      allow write: if isLoggedUser(request.auth.token.email) && requestData() != null && requestData().name == request.auth.token.name;
    }

    match /class/{id} {
      allow write: if loggedUserIsGuildMaster(database);
    }
  }
}
